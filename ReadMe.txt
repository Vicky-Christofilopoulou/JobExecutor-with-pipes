Για την ευκολότερη και καλύτερη μεταγλώττιση του προγράμματος δημιουργήθηκε το 
αντίστοιχο Makefile. Ο κώδικας έχει τροποποιηθεί ώστε να γίνεται ανακατεύθυνση 
της εκτέλεσης των εντολών  έτσι ώστε στην κονσόλα να εμφανίζονται μόνο οι απα-
ντήσεις του server.

Ο κώδικας έχει τμηματόποιηθει έτσι ώστε να είναι πιο κατανοητός και να υπάρχει 
καλή απόκρυψη πληροφορίας. Ειδικότερα αποτελείται από :

1. main.c : Όπου δημιουργούνται τόσο το αρχείο jobExecutorServer.txt όσο και τα 
named pipes. Πιο συγκεκριμένα, έχω χρησιμοποιήσει δυο, το commanderfifo  στο 
οποίο ο server διαβάζει και ο commander γράφει και τον serverfifo, ο οποίος κά-
νει την αντίθετη λειτουργία. Επιπλέον, δημιουργείται ο ίδιος ο server καλώντας 
την συνάρτηση jobExecutorServer() και ελέγχεται η ορθότητα της εντολής και των 
ορισμάτων που πληκτρολογεί ο χρήστης. Κατόπιν καλείται ο commander 
(jobCommander(argc, argv, server_pid)).

2. jobCommander.c : Αρχικά ανοίγει τα pipe και διαβάζει από το αρχείο του server
το pid του. Έπειτα, ενώνει τα ορίσματα από την γραμμή εντολών, στέλνει σήμα 
SIGCONT προκειμένου να ενημερώσει τον server ότι πρόκειται να γράψει στο αντί-
στοιχο pipe. Όταν ο server, στείλει την απάντηση, την εκτυπώνει στην οθόνη.

3. jobExecutorServer.c : Ο server ανοίγει κι αυτός τα pipe και στην συνέχεια,
εισέρχεται σε έναν ατέρμονα βρόγχο στον οποίο γίνεται pause μέχρι να στείλει το
σωστό σήμα ο commander. Όταν το λάβει, διαβάζει το μήνυμα και ανάλογα με την 
πρώτη λέξη εκτελεί τη σωστή ενέργεια. 

    * issueJob : Διατηρώ δύο ουρές, running και waiting, όπου με βάση το concu-
    rrency τοποθετείτε στην σωστή ουρά. 

    * setConcurrency : Έαν αυξηθεί το concurrency ελέγχω εάν υπάρχει κάτι που 
    να αναμένει, ενώ εάν μειωθεί, αλλάζω το concurrency και περιμένω να τελειώ-
    σουν οι ήδη ενεργές δουλειές.

    * stop : Με βάση το jobId διαγράφει τη δουλειά από την αντίστοιχη δουλειά.

    * poll : Εμφανίζει είτε τις δουλειές που περιμένουν είτε αυτές που τρέχουν.

    * exit : Σκοτώνει όσες δουλειές τρέχουν ακόμα και διαγράφει το αρχείο του 
    server.

4. myheaders.h : Πρόκειται για το αρχείο επικεφαλίδας το οποίο περιέχει κάποιες
κοινόχρηστες μεταβλητές (extern char * Server, extern int Concurrency) και τα 
πρότυπα των δικών μου συναρτήσεων που αξιοποιούν ο server και ο commander.

5. queue.h : Πρόκειται για το αρχείο επικεφαλίδας που περιέχει τα πρότυπα των 
συναρτήσεων που χρησιμοποιεί η ουρά.

5. queue.c : Εδω, βρίσκεται η υλοποίηση των βασικών συναρτήσεων της ουράς.